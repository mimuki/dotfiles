#!/bin/bash  
#TODO: learn how arrays work
alerts=() # hey this is a heads up
errors=() # hey you fucked up

{{ if eq (len .chezmoi.hostname) 8 }}
# This machine is using the current naming convention! yay!
case ${HOSTNAME:0:1} in
  C) formFactor="console";;
  D) formFactor="desktop";;
  L) formFactor="laptop";;
  P) formFactor="phone";;
  S) formFactor="server";;
  V) formFactor="VM";;
  *) formFactor="unknown";;
esac
{{ else }}
# This machine definitely isn't using our naming convention.
formFactor="unknown"
{{ end }}

if [ "$formFactor" = "unknown" ]; then
errors+=("\
║    invalid hostname detected    ║\n\
╠═════════════════════════════════╣\n\
║ This machine's hostname doesn't ║\n\
║ match our standards, and we can ║\n\
║ not apply any customizations    ║\n\
║ based on them. Please fix this! ║\n\
║ Your current hostname is:       ║\n\
╚═════════════════════════════════╝\n\
{{ .chezmoi.hostname }} (length: {{ len .chezmoi.hostname }}, expected: 8)\n\
╔═════════════════════════════════╗\n\
║ If your hostname seems fine...  ║\n\
║ code's haunted, send help.      ║\n")
fi

installCore=False
installExtra=False

echo "╔═════════════════════════════════╗"
echo "║  ilo Mimuki's installer script  ║"
echo "╠═════════════════════════════════╣"
echo "║   Are you me? I sure hope so!   ║"
echo "║                                 ║"
echo "║  This has been designed for my  ║"
echo "║ unique accessibility needs, and ║"
echo "║ aesthetic sensibilities. It can ║"
echo "║   and WILL break your system.   ║"
echo "╚═════════════════════════════════╝"
echo ""

# magic stack overflow sauce
function pad () { [ "$#" -gt 1 ] && [ -n "$2" ] && printf "%$2.${2#-}s" "$1"; }

ask() {
read -p "Would you like to $1 (y/n) " choice
case "$choice" in 
  y|Y ) setting=True;;
  n|N ) setting=False;;
  * )   echo "Invalid input! only y or n, please.";setting=False;;
esac
}

ask "continue?"
if [ "$setting" = "False" ]; then
  exit
fi

ask "install/update core software?"
installCore=$setting

ask "install/update additional software?"
installExtra=$setting

# todo: mention if talon, fzf etc need installing here
echo "╔═════════════════════════════════╗"
echo "║ Tasks to be automated this time ║"
echo "╠═════════════════════════════════╣"
echo "║ * sudo apt-get update           ║"
if [ "$installCore" = "True" ]; then
echo "║ * Installing essential software ║"
fi
if [ "$installExtra" = "True" ]; then
echo "║ * Installing extra software     ║"
fi
echo "╠═════════════════════════════════╣"
echo "║ Form factor: $(pad $formFactor 18) ║"
echo "║ OS: $(pad "{{ .chezmoi.osRelease.id }}" 27) ║"
echo "╚═════════════════════════════════╝"

ask "apply these changes? I won't ask again."
if [ "$setting" = "False" ]; then
  exit
fi

sudo apt-get update


# The bare minimum we need to do stuff (also includes programs bound to stuff in awesome)
if [ "$installCore" = "True" ]; then
  echo "╔═════════════════════════════════╗"
  echo "║  Installing essential software  ║"
  echo "║           Part 1: apt           ║"
  echo "╚═════════════════════════════════╝"
  # Universal 
  sudo apt-get install -qq -o=Dpkg::Use-Pty=0 git gh vim tmux curl
  # Not servers
  if [ "$formFactor" != "server" ]; then
    sudo apt-get install -qq -o=Dpkg::Use-Pty=0 awesome keynav rofi gammastep mpv scrot xclip xterm dex

    # literally need all of this for talon (because snixembed)
    # todo: in a fresh install see what you really need just in case
    sudo apt-get install -qq -o=Dpkg::Use-Pty=0 make valac libdbusmenu-gtk-dev libdbusmenu-glib-dev libdbusmenu-gtk3-dev
  # Laptop
    if [ "$formFactor" = "laptop" ]; then
      sudo apt-get install -qq -o=Dpkg::Use-Pty=0 tlp brightnessctl
    fi
  fi

  echo "╔═════════════════════════════════╗"
  echo "║  Installing essential software  ║"
  echo "║         Part 2: non-apt         ║"
  echo "╚═════════════════════════════════╝"
  # Universal
  # ...

  # Not servers
  if [ "$formFactor" != "server" ]; then
    # Talon
    if ! [ -x "$(command -v snixembed)" ]
    then
      echo "╔═════════════════════════════════╗"
      echo "║       Installing talon...       ║"
      echo "╚═════════════════════════════════╝"
      TEMP_FILE="$(mktemp)" &&
      wget -O "$TEMP_FILE" 'https://talonvoice.com/dl/latest/talon-linux.tar.xz' &&
      tar -xf "$TEMP_FILE" --directory ~/.talon
      git clone https://git.sr.ht/~steef/snixembed 
      cd snixembed
      sudo make install --quiet
      rm ../snixembed -rf
      # Remind me afterwards how to set it up :D 
      alerts+=("\
║              talon              ║\n\
╠═════════════════════════════════╣\n\
║ Talon was installed, but won't  ║\n\
║ work until you right click it's ║\n\
║ tray icon and install a speech  ║\n\
║ model manually.                 ║\n")
    fi
  fi
fi

if [ "$installExtra" = "True" ]; then
  echo "╔═════════════════════════════════╗"
  echo "║    Installing extra software    ║"
  echo "║           Part 1: apt           ║"
  echo "╚═════════════════════════════════╝"
  # Universal
    sudo apt-get install -qq -o=Dpkg::Use-Pty=0 gawk btop 
  # Not servers
  if [ "$formFactor" != "server" ]; then
    sudo apt-get install -qq -o=Dpkg::Use-Pty=0 kdeconnect dex picom
  else
    # Servers
    sudo apt-get install -qq -o=Dpkg::Use-Pty=0 cbonsai
  fi

  echo "╔═════════════════════════════════╗"
  echo "║    Installing extra software    ║"
  echo "║         Part 2: non-apt         ║"
  echo "╚═════════════════════════════════╝"
  # Universal
  if ! [ -x "$(command -v fzf)" ]
  then
    echo "╔═════════════════════════════════╗"
    echo "║        Installing fzf...        ║"
    echo "╚═════════════════════════════════╝"
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --all
  fi
  # Not servers
  if [ "$formFactor" != "server" ]; then
    if [ ! -d ~/.nvm ]; then
      echo "╔═════════════════════════════════╗"
      echo "║        Installing nvm...        ║"
      echo "╚═════════════════════════════════╝"
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
        alerts+=("\
║               nvm               ║\n\
╠═════════════════════════════════╣\n\
║ nvm was installed, please close ║\n\
║ and reopen your terminal if you ║\n\
║ need to use it straight away.   ║\n")
    fi
  else
    # Servers
    if ! [ -x "$(command -v msync)" ]
    then
      echo "╔═════════════════════════════════╗"
      echo "║       Installing msync...       ║"
      echo "╚═════════════════════════════════╝"

      TEMP_FILE="$(mktemp)" &&
      wget -O "$TEMP_FILE" 'https://github.com/Kansattica/msync/releases/download/v0.9.9.8/msync-0.9.9-Linux.deb' &&
      sudo dpkg -i "$TEMP_FILE"
      rm -f "$TEMP_FILE"
      # Remind me afterwards how to set it up :D 
      alerts+=("\
║              msync              ║\n\
╠═════════════════════════════════╣\n\
║ msync was installed, please run ║\n\
║ $ msync new -a you@example.com  ║\n\
║ and follow the prompts. Finally ║\n\
║ run these commands:             ║\n\
║ $ msync config auth_code <code> ║\n\
║   --account you@example.com     ║\n\
║ $ msync new -a you@example.com  ║\n")
    fi
  fi
fi

if [ "${#alerts[@]}" -gt 0 ]
  then
  echo "╔═════════════════════════════════╗"
  echo "║  Manual Intervention Required   ║"
  echo "╠═════════════════════════════════╣"
  echo "║ I am but a humble bash script,  ║"
  echo "║ and need some human help to     ║"
  echo "║ finish things up. Please make   ║"
  echo "║ sure you do this stuff for me.  ║"
  echo "╚═════════════════════════════════╝"
  for i in "${alerts[@]}"; do
    echo "╔═════════════════════════════════╗"
    printf "$i"
    echo "╚═════════════════════════════════╝"
  done
fi
if [ "${#errors[@]}" -gt 0 ]
  then
  echo "╔═════════════════════════════════╗"
  echo "║      Major errors occured!      ║"
  echo "╠═════════════════════════════════╣"
  echo "║ This stuff needs dealing with   ║"
  echo "║ as soon as possible. (TODO: add ║"
  echo "║ more error stuff here, lol)     ║"
  echo "╚═════════════════════════════════╝"
  for i in "${errors[@]}"; do
    echo "╔═════════════════════════════════╗"
    printf "$i"
    echo "╚═════════════════════════════════╝"
  done
fi 
echo "           ╔═══════════╗"
echo "           ║ All done! ║"
echo "           ╚═══════════╝"
