--------------------------------------------------------------------------------
--                              keybindings.lua                               --
--------------------------------------------------------------------------------

----- [ Dependencies ] ---------------------------------------------------------

-- Notification library
local naughty = require("naughty")
local hotkeys_popup = require("awful.hotkeys_popup")
-- Move window to next/previous tag
local gmath = require("gears.math")

require("vars") -- Variables
local bling = require("bling")
----- [ Keybindings ] ----------------------------------------------------------
globalkeys = gears.table.join(
----- [ Focus and Navigation ] -------------------------------------------------
awful.key({ modkey,           }, "i", awful.tag.viewprev,
          { description = "view previous tag", group = "tag" }),

awful.key({ modkey,           }, "Up", awful.tag.viewprev),

awful.key({ modkey,           }, "n",
            function ()
              local t = awful.screen.focused().selected_tag
              if t.name == "1" then
                -- Doesn't seem to work without this
                -- don't even think about releasing Super_L as well, though
                -- you have been warned, it will make it switch faster
                -- something something monkey's paw
                root.fake_input('key_release', 'n' )
                root.fake_input('key_press'  , 'F9')
                root.fake_input('key_release', 'F9')
                -- The actual normal behaviour
              else awful.client.focus.byidx(-1) end
            end,
          { description = "focus previous window", group = "window" }),

awful.key({ modkey,           }, "Left",
            function ()
              local t = awful.screen.focused().selected_tag
              if t.name == "1" then
                -- Doesn't seem to work without this
                root.fake_input('key_release', 'Left')
                root.fake_input('key_press'  , 'F9'  )
                root.fake_input('key_release', 'F9'  )
                -- The actual normal behaviour
              else awful.client.focus.byidx(-1) end
            end),

awful.key({ modkey,           }, "o",
            function()
              local t = awful.screen.focused().selected_tag
              if t.name == "1" then
                -- Doesn't seem to work without this
                root.fake_input('key_release', 'o'  )
                root.fake_input('key_press'  , 'F10')
                root.fake_input('key_release', 'F10')
                -- The actual normal behaviour
              else awful.client.focus.byidx( 1) end
            end,
          { description = "focus next window", group = "window" }),


awful.key({ modkey,           }, "Right",
            function()
              local t = awful.screen.focused().selected_tag
              if t.name == "1" then
                -- Doesn't seem to work without this
                root.fake_input('key_release', 'Right')
                root.fake_input('key_press'  , 'F10'  )
                root.fake_input('key_release', 'F10'  )
                -- The actual normal behaviour
              else awful.client.focus.byidx( 1) end
            end),

awful.key({ modkey,           }, "e", awful.tag.viewnext,
          { description = "view next tag", group = "tag" }),

awful.key({ modkey,           }, "Down", awful.tag.viewnext),


-- awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
--           { description = "jump to urgent window", group = "window" }),

awful.key({ modkey,           }, "Tab",
            function ()
                awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
                end
            end,
          { description = "go back", group = "window" }),


-- Only relevant when we get a second monitor. Pick a binding you like then.
--    awful.key({ modkey, "Control" }, "o",
--                function () awful.screen.focus_relative( 1) end,
--              { description = "focus next screen", group = "screen" }),
--    awful.key({ modkey, "Control" }, "n",
--                function () awful.screen.focus_relative(-1) end,
--              { description = "focus previous screen", group = "screen" }),

----- [ Layout Manipulation ] --------------------------------------------------

------- [ Move Window ]
awful.key({ modkey, "Shift" }, "i", function ()
            local c = client.focus
            if not c then return end
            local t = c.screen.selected_tag
            local tags = c.screen.tags
            local idx = t.index
            local newtag = tags[gmath.cycle(#tags, idx - 1)]
            c:move_to_tag(newtag)
            end,
          { description = "move window to previous tag", group = "window" }),

awful.key({ modkey, "Shift" }, "Up", function ()
            local c = client.focus
            if not c then return end
            local t = c.screen.selected_tag
            local tags = c.screen.tags
            local idx = t.index
            local newtag = tags[gmath.cycle(#tags, idx - 1)]
            c:move_to_tag(newtag)
            end),

awful.key({ modkey, "Shift"   }, "n",
            function () awful.client.swap.byidx( -1) end,
          { description = "swap with previous window",
            group = "window"  }),

awful.key({ modkey, "Shift"   }, "Left",
            function () awful.client.swap.byidx( -1) end),

awful.key({ modkey, "Shift"   }, "o",
            function () awful.client.swap.byidx(  1) end,
          { description = "swap with next window",
            group = "window"  }),
awful.key({ modkey, "Shift"   }, "Right",
            function () awful.client.swap.byidx(  1) end),


awful.key({ modkey, "Shift" }, "e", function ()
            local c = client.focus
            if not c then return end
            local t = c.screen.selected_tag
            local tags = c.screen.tags
            local idx = t.index
            local newtag = tags[gmath.cycle(#tags, idx + 1)]
            c:move_to_tag(newtag)
         end,
          { description = "move window to next tag", group = "window" }),

awful.key({ modkey, "Shift" }, "Down", function ()
            local c = client.focus
            if not c then return end
            local t = c.screen.selected_tag
            local tags = c.screen.tags
            local idx = t.index
            local newtag = tags[gmath.cycle(#tags, idx + 1)]
            c:move_to_tag(newtag)
         end),

awful.key({ modkey,           }, "space",
            function () awful.layout.inc( 1) end,
          { description = "select next layout", group = "layout" }),

awful.key({ modkey, "Control" }, "space",
            function () awful.layout.inc(-1) end,
          { description = "select previous layout", group = "layout" }),

----- [ Program Launchers ] ----------------------------------------------------

awful.key({ modkey, }, "Return", function() quakeTerminal:toggle() end,
          { description = "Toggle terminal"}),

awful.key({ modkey, "Shift"   }, "Return", 
  function ()
    local t = awful.screen.focused().selected_tag
    if t.name == "1" then
      awful.spawn(terminal .. " -e tmux a") 
      -- The actual normal behaviour
      else awful.spawn(terminal) end

  end,
          { description = "Terminal", group = "programs" }),

awful.key({ modkey, }, "u", function()
  pyradio:toggle() end,
  { description = "Toggle pyradio"}),
------- [ Rofi ]
-- TODO: maybe make it so that repeating these toggles rofi open/closed?
awful.key({ modkey            }, "p",
            function () awful.util.spawn("rofi -show drun") end,
          { description = "Search programs", group = "rofi" }),

awful.key({ modkey            }, "l",
            function () awful.util.spawn("rofi -show filebrowser -theme-str '#listview {lines:6;}'") end,
          { description = "Search files", group = "rofi" }),

awful.key({ modkey            }, "w",
            function () awful.util.spawn("rofi -show window") end,
          { description = "Search windows", group = "rofi" }),

awful.key({ modkey }, "y",  awful.client.floating.toggle,
          { description = "toggle floating", group = "client" }),
----- [ System Controls ] ------------------------------------------------------
-- Screenshot (the entire screen)
awful.key({ }, "Print", 
            function () awful.util.spawn([[scrot 'Pictures/Screenshots/%Y%m%d_%H%M%S.png' -e 'xclip -selection clipboard -t image/png -i $f']]) end,
          { description = "Screenshot", group = "awesome"}),

awful.key({ modkey }, "Print",
            function ()
              awful.util.spawn([[scrot 'Pictures/Screenshots/%Y%m%d_%H%M%S.png' -s -l width=4,color="]] .. beautiful.accent_alt .. [[",opacity=100,mode=edge -e 'xclip -selection clipboard -t image/png -i $f']])
            end,
            { description = "Screenshot selection", group = "awesome"}),


awful.key({ modkey }, "h",
            function ()
              awful.util.spawn([[scrot 'Pictures/Screenshots/%Y%m%d_%H%M%S.png' -s -l width=4,color="]] .. beautiful.accent_alt .. [[",opacity=100,mode=edge -e 'xclip -selection clipboard -t image/png -i $f']])
            end,
            { description = "Screenshot selection", group = "awesome"}),

-- Mute audio
--awful.key({ modkey }, "m",
--            function ()
--              os.execute(string.format(
--                "pactl set-sink-mute %s toggle",
--                volume.device))
--              volume.notify()
--            end,
--          { description = "mute audio", group = "audio" }),


--awful.key({}, "XF86AudioMute",
--            function ()
 --             os.execute(string.format(
  --              "pactl set-sink-mute %s toggle",
   --             volume.device))
    --          volume.notify()
     --       end),

-- Volume up
--awful.key({ modkey }, "j",
 --           function ()
  --            os.execute(string.format(
   --             "pactl set-sink-volume %s +1%%",
    --            volume.device))
     --         volume.notify()
      --      end,
       --   { description = "increase audio", group = "audio" }),

--awful.key({}, "XF86AudioRaiseVolume",
 --           function ()
  --            os.execute(string.format(
   --             "pactl set-sink-volume %s +1%%",
    --            volume.device))
     --         volume.notify()
      --      end),

-- Volume down
--awful.key({ modkey }, "k",
 --           function ()
  --            os.execute(string.format(
   --             "pactl set-sink-volume %s -1%%",
    --            volume.device))
     --         volume.notify()
      --      end,
       --   { description = "decrease audio", group = "audio" }),

--awful.key({}, "XF86AudioLowerVolume",
 --           function ()
  --            os.execute(string.format(
   --             "pactl set-sink-volume %s -1%%",
    --            volume.device))
     --         volume.notify()
      --      end),

-- toggle microphone 
awful.key({}, "XF86AudioMicMute",
              function() os.execute("amixer set Capture toggle") end),
-- toggle wifi
-- awful.key({}, "XF86WLAN",
--              function() os.execute("wifi toggle") end),
-- toggle bluetoth
awful.key({}, "XF86Bluetooth",
              function() os.execute("bluetooth toggle") end),
-- adjust brightness
awful.key({}, "XF86MonBrightnessUp",
              function() os.execute("xbacklight -inc 1") end),
awful.key({}, "XF86MonBrightnessDown",
              function() os.execute("xbacklight -dec 1") end),

----- [ AwesomeWM Meta Controls ] ----------------------------------------------

awful.key({ modkey,           }, "/",      hotkeys_popup.show_help,
          { description = "show help", group="awesome" }),
awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
          { description = "go back", group = "tag" }),
awful.key({ modkey, "Control" }, "r", awesome.restart,
          { description = "reload awesome", group = "awesome" })
)
----- [ Client Keys ] ----------------------------------------------------------
clientkeys = gears.table.join(
    awful.key({ modkey,       }, "d", function (c) c:kill() end,
              { description = "close window", group = "window" }),
awful.key(
  { modkey,           }, "b", function (c)
    awful.titlebar.toggle(c, "top") end,
  { description = "toggle titlebar on focused client", group = "client" }),

  ------- [ Layout Settings ]
-- Floating window: shrinks the focused window horizontally
--   Tiling window: shrinks the main window horizontally
awful.key(
  { modkey, "Control" }, "n", function (c)
    if c.floating then
      c:relative_move(10, 0, -20, 0)
    else
      awful.tag.incmwfact (-0.025) end
    end,
  { description = "Shrink window horizontally", group = "layout" }),
-- Floating window: grows the focused window vertically
--   Tiling window: grows the focused window if it's:
--                    - Not a main window
--                    - Has other secondary windows
awful.key(
  { modkey, "Control" }, "e", function (c)
    if c.floating then
      c:relative_move(0, -10, 0, 20)
    else
      awful.client.incwfact ( 0.025) end
    end,
  { description = "Grow window vertically", group = "layout" }),

-- Floating window: shrinks the focused window vertically
--   Tiling window: shrinks the focused window if it's:
--                    - Not a main window
--                    - Not the only secondary window
awful.key(
  { modkey, "Control" }, "i", function (c)
    if c.floating then
      c:relative_move(0, 10, 0, -20)
    else
      awful.client.incwfact (-0.025) end
    end,
  { description = "Shrink window vertically", group = "layout" }),

-- Floating window: grows the focused window horizontally
-- Tiling window: grows the main window
awful.key(
  { modkey, "Control" }, "o", function (c)
    if c.floating then
      c:relative_move(-10, 0, 20, 0)
    else
      awful.tag.incmwfact ( 0.025) end
    end,
  { description = "Grow horizontally to the right", group = "layout" }),

-- Shifted, slower variant
awful.key(
  { modkey, "Control", "Shift" }, "n", function (c) -- move left
    if c.floating then
      c:relative_move(2, 0, -5, 0)
    else
      awful.tag.incmwfact (-0.002) end
    end),
awful.key(
  { modkey, "Control", "Shift" }, "e", function (c) -- move down
    if c.floating then
      c:relative_move(0, -2, 0, 5)
    else
      awful.client.incwfact ( 0.002) end
    end),
awful.key(
  { modkey, "Control", "Shift" }, "i", function (c) -- move up
    if c.floating then
      c:relative_move(0, 2, 0, -5)
    else
      awful.client.incwfact (-0.002) end
    end),
awful.key(
  { modkey, "Control", "Shift" }, "o", function (c) -- move right
    if c.floating then
      c:relative_move(-2, 0, 5, 0)
    else
      awful.tag.incmwfact ( 0.002) end
    end),

-- Move floating window
awful.key(
  { modkey, "Mod1"   }, "n",  function (c) c:relative_move(-25,  0,  0,  0) end,
  { description = "Move floating window left",  group = "layout" }),

awful.key(
  { modkey, "Mod1"   }, "e",  function (c) c:relative_move(  0, 25,  0,  0) end,
  { description = "Move floating window down",  group = "layout" }),

awful.key(
  { modkey, "Mod1"   }, "i",    function (c) c:relative_move(  0,-25,  0,  0) end,
  { description = "Move floating window up",    group = "layout" }),

awful.key(
  { modkey, "Mod1"   }, "o", function (c) c:relative_move( 25,  0,  0,  0) end,
  { description = "Move floating window right", group = "layout" }),

-- Shifted, slower variants
awful.key(
  { modkey, "Mod1", "Shift" }, "n",  function (c)
    c:relative_move(-5, 0, 0, 0) end),
awful.key(
  { modkey, "Mod1", "Shift" }, "e",  function (c)
    c:relative_move( 0, 5, 0, 0) end),
awful.key(
  { modkey, "Mod1", "Shift" }, "i",    function (c)
    c:relative_move( 0,-5, 0, 0) end),
awful.key(
  { modkey, "Mod1", "Shift" }, "o", function (c)
    c:relative_move( 5, 0, 0, 0) end),

-- As above, but with arrow keys
-- Floating window: shrinks the focused window horizontally
--   Tiling window: shrinks the main window horizontally
awful.key(
  { modkey, "Control" }, "Left", function (c)
    if c.floating then
      c:relative_move(10, 0, -20, 0)
    else
      awful.tag.incmwfact (-0.025) end
    end,
  { description = "Shrink window horizontally", group = "layout" }),
-- Floating window: grows the focused window vertically
--   Tiling window: grows the focused window if it's:
--                    - Not a main window
--                    - Has other secondary windows
awful.key(
  { modkey, "Control" }, "Down", function (c)
    if c.floating then
      c:relative_move(0, -10, 0, 20)
    else
      awful.client.incwfact ( 0.025) end
    end,
  { description = "Grow window vertically", group = "layout" }),

-- Floating window: shrinks the focused window vertically
--   Tiling window: shrinks the focused window if it's:
--                    - Not a main window
--                    - Not the only secondary window
awful.key(
  { modkey, "Control" }, "Up", function (c)
    if c.floating then
      c:relative_move(0, 10, 0, -20)
    else
      awful.client.incwfact (-0.025) end
    end,
  { description = "Shrink window vertically", group = "layout" }),

-- Floating window: grows the focused window horizontally
-- Tiling window: grows the main window
awful.key(
  { modkey, "Control" }, "Right", function (c)
    if c.floating then
      c:relative_move(-10, 0, 20, 0)
    else
      awful.tag.incmwfact ( 0.025) end
    end,
  { description = "Grow horizontally to the right", group = "layout" }),

-- Shifted, slower variant
awful.key(
  { modkey, "Control", "Shift" }, "Left", function (c) -- move left
    if c.floating then
      c:relative_move(2, 0, -5, 0)
    else
      awful.tag.incmwfact (-0.002) end
    end),
awful.key(
  { modkey, "Control", "Shift" }, "Down", function (c) -- move down
    if c.floating then
      c:relative_move(0, -2, 0, 5)
    else
      awful.client.incwfact ( 0.002) end
    end),
awful.key(
  { modkey, "Control", "Shift" }, "Up", function (c) -- move up
    if c.floating then
      c:relative_move(0, 2, 0, -5)
    else
      awful.client.incwfact (-0.002) end
    end),
awful.key(
  { modkey, "Control", "Shift" }, "Right", function (c) -- move right
    if c.floating then
      c:relative_move(-2, 0, 5, 0)
    else
      awful.tag.incmwfact ( 0.002) end
    end),

-- Move floating window
awful.key(
  { modkey, "Mod1"   }, "Left",  function (c) c:relative_move(-25,  0,  0,  0) end,
  { description = "Move floating window left",  group = "layout" }),

awful.key(
  { modkey, "Mod1"   }, "Down",  function (c) c:relative_move(  0, 25,  0,  0) end,
  { description = "Move floating window down",  group = "layout" }),

awful.key(
  { modkey, "Mod1"   }, "Up",    function (c) c:relative_move(  0,-25,  0,  0) end,
  { description = "Move floating window up",    group = "layout" }),

awful.key(
  { modkey, "Mod1"   }, "Right", function (c) c:relative_move( 25,  0,  0,  0) end,
  { description = "Move floating window right", group = "layout" }),

-- Shifted, slower variants
awful.key(
  { modkey, "Mod1", "Shift" }, "Left",  function (c)
    c:relative_move(-5, 0, 0, 0) end),
awful.key(
  { modkey, "Mod1", "Shift" }, "Down",  function (c)
    c:relative_move( 0, 5, 0, 0) end),
awful.key(
  { modkey, "Mod1", "Shift" }, "Up",    function (c)
    c:relative_move( 0,-5, 0, 0) end),
awful.key(
  { modkey, "Mod1", "Shift" }, "Right", function (c)
    c:relative_move( 5, 0, 0, 0) end),



{{- if eq .chezmoi.hostname "DESKRATS-2020MNT21" }}
-- Toggle live captions, using Bling's scratchpad feature. Defined in utilities.lua
awful.key({ modkey, }, "c", function()
  livecaptions:toggle() end,
  { description = "Toggle live captions"})
{{- end }}

{{- if eq .chezmoi.hostname "mango-L2123L" }}
-- This device doesn't support live captions
awful.key({ modkey, }, "c", function()
  naughty.notify(
  {
    title = "Unsupported feature!",
    text = "LAPRATS-2023MNT21 doesn't support live captions!"
  })
  end
)
{{- end }}
)

-- Create tag bindings automatically, and map them to my home row
for i = 1, totalTags do
globalkeys = gears.table.join(globalkeys,
  -- View tag only.
  awful.key({ modkey,         }, homeRow[i],
    function ()
      local screen = awful.screen.focused()
      local tag = screen.tags[i]
      if tag then
       tag:view_only()
      end
    end,
    { description = "view tag "..i, group = "tag" }),

    -- Move client to tag.
  awful.key({ modkey, "Shift" }, homeRow[i],
    function ()
      if client.focus then
        local tag = client.focus.screen.tags[i]
        if tag then
          client.focus:move_to_tag(tag)
        end
     end
    end,
    { description = "move focused window to tag "..i,
      group = "tag" })
)
end

-- Menu navigation
awful.menu.menu_keys.up = { "i", "Up" }
awful.menu.menu_keys.down = { "e", "Down" }
awful.menu.menu_keys.exec = { "o", "Right", "Space", "Enter" }
awful.menu.menu_keys.enter = { "o", "Right", "Space", "Enter" }
awful.menu.menu_keys.back = { "n", "Left", "Backspace" }
awful.menu.menu_keys.close = { "Escape" }
